// src/services/upload.service.js - File upload handling
import api from './api';

/**
 * Get a pre-signed URL for direct uploads to S3
 * @param {Object} options - Upload options
 * @param {string} options.fileName - File name
 * @param {string} options.folder - Storage folder
 * @param {string} options.contentType - File MIME type
 * @returns {Promise} Promise object with signed URL
 */
export const getSignedUploadUrl = async (options) => {
  try {
    const response = await api.post('/documents/signed-url', options);
    return {
      success: true,
      signedUrl: response.data.signedUrl,
      fileUrl: response.data.fileUrl
    };
  } catch (error) {
    return {
      success: false,
      message: error.response?.data?.error || 'Failed to get signed URL'
    };
  }
};

/**
 * Upload a file directly to S3 using signed URL
 * @param {string} signedUrl - Pre-signed URL
 * @param {File} file - File to upload
 * @param {string} contentType - File content type
 * @returns {Promise} Promise object with upload result
 */
export const uploadToSignedUrl = async (signedUrl, file, contentType) => {
  try {
    await fetch(signedUrl, {
      method: 'PUT',
      body: file,
      headers: {
        'Content-Type': contentType
      }
    });
    return {
      success: true,
      message: 'File uploaded successfully'
    };
  } catch (error) {
    return {
      success: false,
      message: 'Failed to upload file'
    };
  }
};

/**
 * Upload a document
 * @param {FormData} formData - Form data with document file
 * @returns {Promise} Promise object with upload result
 */
export const uploadDocument = async (formData) => {
  try {
    const response = await api.post('/documents', formData, {
      headers: {
        'Content-Type': 'multipart/form-data'
      }
    });
    return {
      success: true,
      document: response.data.data,
      message: 'Document uploaded successfully'
    };
  } catch (error) {
    return {
      success: false,
      message: error.response?.data?.error || 'Failed to upload document'
    };
  }
};

/**
 * Get user documents
 * @returns {Promise} Promise object with documents
 */
export const getDocuments = async () => {
  try {
    const response = await api.get('/documents');
    return {
      success: true,
      documents: response.data.data
    };
  } catch (error) {
    return {
      success: false,
      message: error.response?.data?.error || 'Failed to fetch documents'
    };
  }
};

/**
 * Get document by ID
 * @param {string} id - Document ID
 * @returns {Promise} Promise object with document
 */
export const getDocumentById = async (id) => {
  try {
    const response = await api.get(`/documents/${id}`);
    return {
      success: true,
      document: response.data.data
    };
  } catch (error) {
    return {
      success: false,
      message: error.response?.data?.error || 'Failed to fetch document'
    };
  }
};

/**
 * Delete a document
 * @param {string} id - Document ID
 * @returns {Promise} Promise object with deletion result
 */
export const deleteDocument = async (id) => {
  try {
    await api.delete(`/documents/${id}`);
    return {
      success: true,
      message: 'Document deleted successfully'
    };
  } catch (error) {
    return {
      success: false,
      message: error.response?.data?.error || 'Failed to delete document'
    };
  }
};

/**
 * Share a document with another user
 * @param {string} id - Document ID
 * @param {Object} shareData - Share data (email, permission)
 * @returns {Promise} Promise object with share result
 */
export const shareDocument = async (id, shareData) => {
  try {
    const response = await api.post(`/documents/${id}/share`, shareData);
    return {
      success: true,
      message: 'Document shared successfully'
    };
  } catch (error) {
    return {
      success: false,
      message: error.response?.data?.error || 'Failed to share document'
    };
  }
};

/**
 * Prepare form data for file upload
 * @param {File} file - File to upload
 * @param {Object} metadata - Additional metadata
 * @returns {FormData} Form data ready for upload
 */
export const prepareFormData = (file, metadata = {}) => {
  const formData = new FormData();
  formData.append('document', file);
  
  // Add any additional metadata
  Object.keys(metadata).forEach(key => {
    formData.append(key, metadata[key]);
  });
  
  return formData;
};

/**
 * Get file extension from file name
 * @param {string} filename - File name
 * @returns {string} File extension
 */
export const getFileExtension = (filename) => {
  return filename.slice((filename.lastIndexOf('.') - 1 >>> 0) + 2);
};

/**
 * Get file icon based on file type
 * @param {string} fileType - File MIME type or extension
 * @returns {string} Icon class name
 */
export const getFileIcon = (fileType) => {
  const type = fileType.toLowerCase();
  
  if (type.includes('pdf') || type === 'pdf') {
    return 'fa-file-pdf';
  } else if (type.includes('word') || type === 'doc' || type === 'docx') {
    return 'fa-file-word';
  } else if (type.includes('excel') || type === 'xls' || type === 'xlsx' || type === 'csv') {
    return 'fa-file-excel';
  } else if (type.includes('image') || ['jpg', 'jpeg', 'png', 'gif', 'svg'].includes(type)) {
    return 'fa-file-image';
  } else if (type.includes('video') || ['mp4', 'avi', 'mov', 'wmv'].includes(type)) {
    return 'fa-file-video';
  } else if (type.includes('zip') || type.includes('compress') || ['zip', 'rar', '7z', 'tar', 'gz'].includes(type)) {
    return 'fa-file-archive';
  } else {
    return 'fa-file';
  }
};