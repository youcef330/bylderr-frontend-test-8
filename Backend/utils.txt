// utils/errorResponse.js - Custom error response class
class ErrorResponse extends Error {
  constructor(message, statusCode) {
    super(message);
    this.statusCode = statusCode;
  }
}

module.exports = ErrorResponse;

// utils/geocoder.js - Geocoding service
const NodeGeocoder = require('node-geocoder');

const options = {
  provider: process.env.GEOCODER_PROVIDER || 'mapquest',
  httpAdapter: 'https',
  apiKey: process.env.GEOCODER_API_KEY,
  formatter: null
};

const geocoder = NodeGeocoder(options);

module.exports = geocoder;

// utils/validators.js - Custom validators
const validator = require('validator');

/**
 * Validate a URL
 * @param {String} url - URL to validate
 * @returns {Boolean} - True if valid, false otherwise
 */
exports.isValidUrl = (url) => {
  return validator.isURL(url, {
    protocols: ['http', 'https'],
    require_protocol: true
  });
};

/**
 * Validate a password strength
 * @param {String} password - Password to validate
 * @returns {Object} - Validation result with strength score and message
 */
exports.validatePasswordStrength = (password) => {
  let strength = 0;
  let message = '';

  // Length check
  if (password.length >= 8) strength += 1;
  if (password.length >= 12) strength += 1;

  // Complexity checks
  if (/[A-Z]/.test(password)) strength += 1; // Uppercase
  if (/[a-z]/.test(password)) strength += 1; // Lowercase
  if (/[0-9]/.test(password)) strength += 1; // Numbers
  if (/[\W_]/.test(password)) strength += 1; // Special chars

  // Determine message based on strength
  if (strength < 3) {
    message = 'Password is too weak';
  } else if (strength < 5) {
    message = 'Password is moderate';
  } else {
    message = 'Password is strong';
  }

  return {
    strength,
    message,
    isValid: strength >= 3 // Consider valid if strength is at least 3
  };
};

/**
 * Validate an email
 * @param {String} email - Email to validate
 * @returns {Boolean} - True if valid, false otherwise
 */
exports.isValidEmail = (email) => {
  return